#!/usr/bin/env python3

"""
Script to manage Kolla container image tag YAML files.
"""

import argparse
import json
import typing

import yaml


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest="command")
    update = subparsers.add_parser("update", help="Print updated tags YAML")
    update.add_argument("--images-file", help="Path to updated image list JSON file", required=True)
    update.add_argument("--tags-file", help="Path to current tags YAML file", required=True)
    update.add_argument("--output-file", help="Path to updated tags YAML file", required=True)
    return parser.parse_args()


def get_image_var(repository: str) -> str:
    """Return the image tag variable name for a given image.

    :param repository: The repository (registry & name) of the updated image.
    """
    return repository.rpartition("/")[2].rpartition("-source-")[2]


def get_updated_images(images_file: str) -> typing.Dict[str, str]:
    """Return a dict of updated image tags.

    :param images_file: Path to a updated image list JSON file.
    """
    with open(images_file, "r") as f:
        images = f.readlines()

    updated = {}
    # Each line is a JSON blob for an image containing at least Repository and Tag keys.
    for image_json in images:
        try:
            image = json.loads(image_json)
        except json.decoder.JSONDecodeError:
            print("Failed to decode image as JSON")
            print(image_json)
            raise
        repo = image["Repository"]
        if repo.endswith("base"):
            continue
        image_var = get_image_var(repo)
        updated[image_var] = image["Tag"]
    return updated


def write_tags(output_file: str, tags: typing.Dict[str, str]):
    """Write updated tags to the output file."""
    with open(output_file, "w") as f:
        f.write("# Do not edit! This file is autogenerated by kolla-tags.py.\n")
        yaml.dump(tags, f, default_flow_style=False)


def update(tags_file: str, images_file: str, output_file: str):
    """Generate and print updated image tags YAML."""
    updated = get_updated_images(images_file)
    with open(tags_file, "r") as f:
        tags = yaml.safe_load(f)
    tags.update(updated)
    write_tags(output_file, tags)


def main():
    args = parse_args()
    if args.command == "update":
        update(args.tags_file, args.images_file, args.output_file)


if __name__ == "__main__":
    main()
