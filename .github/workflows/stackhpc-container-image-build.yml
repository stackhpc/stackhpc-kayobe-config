---
name: Build Kolla container images
on:
  workflow_dispatch:
    inputs:
      regexes:
        description: Space-separated list of regular expressions matching overcloud images to build
        type: string
        required: false
        default: ""
      overcloud:
        description: Build overcloud images?
        type: boolean
        required: false
        default: true
      seed:
        description: Build seed images?
        type: boolean
        required: false
        default: false
      centos-stream-8:
        description: Build CentOS Stream 8 images?
        type: boolean
        required: false
        default: true
      ubuntu-focal:
        description: Build Ubuntu Focal 20.04 images?
        type: boolean
        required: false
        default: true
      push-images:
        description: Push images?
        type: boolean
        required: false
        default: true
      push-branch:
        description: Push updated tags to a branch?
        type: boolean
        required: false
        default: true
      branch-name:
        description: Name of branch to push to (if different)
        type: string
        required: false
        default: ""
      create-pr:
        description: Create a pull request?
        type: boolean
        required: false
        default: true
      pr-title:
        description: Title for pull request
        type: string
        required: false
        default: Update container images

env:
  ANSIBLE_FORCE_COLOR: True
defaults:
  run:
    # Adds set -eo pipefail by default
    shell: bash
jobs:
  generate-tag:
    name: Generate container image tag
    if: github.repository == 'stackhpc/stackhpc-kayobe-config'
    runs-on: ubuntu-latest
    permissions: {}
    outputs:
      kolla_tag: ${{ steps.kolla_tag.outputs.kolla_tag }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      openstack_release: ${{ steps.openstack_release.outputs.openstack_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Determine OpenStack release
        id: openstack_release
        run: |
          BRANCH=$(awk -F'=' '/defaultbranch/ {print $2}' .gitreview)
          echo "openstack_release=${BRANCH}" | sed "s|stable/||" >> $GITHUB_OUTPUT

      # Generate a tag to apply to all built container images.
      # Without this, each kayobe * container image build command would use a different tag.
      - name: Generate container image tag
        id: kolla_tag
        run: |
          echo "kolla_tag=$(date +${{ steps.openstack_release.outputs.openstack_release }}-%Y%m%dT%H%M%S)" >> $GITHUB_OUTPUT

      # Dynamically define job matrix.
      # We need a separate matrix entry for each distribution, when the relevant input is true.
      # https://stackoverflow.com/questions/65384420/how-do-i-make-a-github-action-matrix-element-conditional
      - name: Generate build matrix
        id: set-matrix
        run: |
          comma=""
          echo -n "matrix={\"distro\": [" >> $GITHUB_OUTPUT
          if [[ ${{ inputs.centos-stream-8 }} == 'true' ]]; then
            echo -n "$comma\"centos\"" >> $GITHUB_OUTPUT
            comma=", "
          fi
          if [[ ${{ inputs.ubuntu-focal }} == 'true' ]]; then
            echo -n "$comma\"ubuntu\"" >> $GITHUB_OUTPUT
            comma=", "
          fi
          echo "]}" >> $GITHUB_OUTPUT

      - name: Display container image tag
        run: |
          echo "${{ steps.kolla_tag.outputs.kolla_tag }}"

  container-image-build:
    name: Build Kolla container images
    if: github.repository == 'stackhpc/stackhpc-kayobe-config'
    runs-on: [self-hosted, stackhpc-kayobe-config-kolla-builder]
    permissions: {}
    strategy:
      matrix: ${{ fromJson(needs.generate-tag.outputs.matrix) }}
    needs:
      - generate-tag
    steps:
      - uses: actions/checkout@v3
        with:
          path: src/kayobe-config

      - name: Clone StackHPC Kayobe repository
        uses: actions/checkout@v3
        with:
          repository: stackhpc/kayobe
          ref: refs/heads/stackhpc/${{ needs.generate-tag.outputs.openstack_release }}
          path: src/kayobe

      # FIXME: Failed in kolla-ansible : Ensure the latest version of pip is installed
      - name: Install dependencies
        run: |
          sudo dnf -y install python3-virtualenv

      - name: Setup networking
        run: |
          if ! ip l show breth1 >/dev/null 2>&1; then
              sudo ip l add breth1 type bridge
          fi
          sudo ip l set breth1 up
          if ! ip a show breth1 | grep 192.168.33.3/24; then
              sudo ip a add 192.168.33.3/24 dev breth1
          fi
          if ! ip l show dummy1 >/dev/null 2>&1; then
              sudo ip l add dummy1 type dummy
          fi
          sudo ip l set dummy1 up
          sudo ip l set dummy1 master breth1

      # FIXME: Without this workaround we see the following issue after the runner is power cycled:
      # TASK [MichaelRigart.interfaces : RedHat | ensure network service is started and enabled] ***
      #   Unable to start service network: Job for network.service failed because the control process exited with error code.
      #   See \"systemctl status network.service\" and \"journalctl -xe\" for details.
      - name: Kill dhclient (workaround)
        run: |
          (sudo killall dhclient || true) && sudo systemctl restart network

      - name: Install Kayobe
        run: |
          mkdir -p venvs &&
          pushd venvs &&
          python3 -m venv kayobe &&
          source kayobe/bin/activate &&
          pip install -U pip &&
          pip install ../src/kayobe

      - name: Bootstrap the control host
        run: |
          source venvs/kayobe/bin/activate &&
          source src/kayobe-config/kayobe-env --environment ci-builder &&
          kayobe control host bootstrap

      - name: Configure the seed host
        run: |
          source venvs/kayobe/bin/activate &&
          source src/kayobe-config/kayobe-env --environment ci-builder &&
          kayobe seed host configure
        env:
          KAYOBE_VAULT_PASSWORD: ${{ secrets.KAYOBE_VAULT_PASSWORD }}

      - name: Build and push kolla overcloud images
        run: |
          args="${{ github.event.inputs.regexes }}"
          args="$args -e kolla_base_distro=${{ matrix.distro }}"
          args="$args -e kolla_tag=${{ needs.generate-tag.outputs.kolla_tag }}"
          #if ${{ inputs.push-images }} == 'true'; then
          #  args="$args --push"
          #fi
          source venvs/kayobe/bin/activate &&
          source src/kayobe-config/kayobe-env --environment ci-builder &&
          kayobe overcloud container image build $args
        env:
          KAYOBE_VAULT_PASSWORD: ${{ secrets.KAYOBE_VAULT_PASSWORD }}
        if: github.event.inputs.overcloud == 'true'

      - name: Build and push kolla seed images
        run: |
          args="kolla_base_distro=${{ matrix.distro }}"
          args="$args -e kolla_tag=${{ needs.generate-tag.outputs.kolla_tag }}"
          #if ${{ inputs.push-images }} == 'true'; then
          #  args="$args --push"
          #fi
          source venvs/kayobe/bin/activate &&
          source src/kayobe-config/kayobe-env --environment ci-builder &&
          kayobe seed container image build $args
        env:
          KAYOBE_VAULT_PASSWORD: ${{ secrets.KAYOBE_VAULT_PASSWORD }}
        if: github.event.inputs.seed == 'true'

      - name: Generate artifacts
        run: |
          mkdir artifacts
          # The tag for all built images
          echo "${{ needs.generate-tag.outputs.kolla_tag }}" > artifacts/kolla_tag
          # Table of of built images for this distro
          sudo docker image ls --filter "${{ env.IMAGE_FILTER }}" > artifacts/container-images
          # And again in JSON
          sudo docker image ls --filter "${{ env.IMAGE_FILTER }}" --format "{{json .}}" > artifacts/container-images.json
        env:
          IMAGE_FILTER: "reference=ark.stackhpc.com/stackhpc-dev/${{ matrix.distro }}-*:${{ needs.generate-tag.outputs.kolla_tag }}"

      - name: Generate updated container image tags
        run: |
          python3 src/kayobe-config/.github/workflows/kolla-tags.py update \
            --images-file artifacts/container-images.json \
            --tags-file src/kayobe-config/etc/kayobe/kolla/tags/${{ matrix.distro }}.yml \
            --output-file artifacts/tags.yml

      - name: Upload container images artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.distro }}-container-images
          path: artifacts
          retention-days: 7
        # FIXME?
        if: always()

      - name: Prune local Kolla container images over 1 week old
        run: |
          sudo docker image prune --all --force --filter until=168h --filter="label=kolla_version"

  sync-container-repositories:
    name: Trigger container image repository sync
    needs:
      - container-image-build
    if: github.repository == 'stackhpc/stackhpc-kayobe-config' && inputs.push-images
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      # NOTE(mgoddard): Trigger another CI workflow in the
      # stackhpc-release-train repository.
      - name: Trigger container image repository sync
        run: |
          filter='${{ inputs.regexes }}'
          if [[ -n $filter ]] && [[ ${{ github.event.inputs.seed }} == 'true' ]]; then
            filter="$filter bifrost"
          fi
          gh workflow run \
          container-sync.yml \
          --repo stackhpc/stackhpc-release-train \
          --ref main \
          -f filter="$filter"
        env:
          GITHUB_TOKEN: ${{ secrets.STACKHPC_RELEASE_TRAIN_TOKEN }}

      - name: Query container image repository sync workflow run ID
        id: run_id
        run: |
          run_id=$(gh --repo stackhpc/stackhpc-release-train run list  --limit 1 --workflow container-sync.yml --json databaseId --jq '.[] | .databaseId')
          echo "run_id=$run_id" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.STACKHPC_RELEASE_TRAIN_TOKEN }}

      - name: Display link to container image repository sync workflows
        run: |
          echo "::notice Container image repository sync workflows: https://github.com/stackhpc/stackhpc-release-train/actions/runs/${{ steps.run_id.outputs.run_id }}"

      # If we're creating a pull request then the images need to be synced to
      # test pulp before CI will pass.
      - name: Wait for container image repository sync workflow to complete
        run: |
          gh --repo stackhpc/stackhpc-release-train run watch ${{ steps.run_id.outputs.run_id }} --exit-status
        env:
          GITHUB_TOKEN: ${{ secrets.STACKHPC_RELEASE_TRAIN_TOKEN }}
        if: inputs.create-pr

  create-pr:
    name: Create a branch/pull request
    needs:
      - generate-tag
      - container-image-build
      - sync-container-repositories
    if: github.repository == 'stackhpc/stackhpc-kayobe-config' && inputs.push-images && inputs.push-branch
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download container image artifacts
        uses: actions/download-artifact@v3

      - name: Update CentOS Stream 8 container image tags
        run: |
          cp centos-container-images/tags.yml etc/kayobe/kolla/tags/centos.yml
        if: inputs.centos-stream-8

      - name: Update Ubuntu Focal container image tags
        run: |
          cp ubuntu-container-images/tags.yml etc/kayobe/kolla/tags/ubuntu.yml
        if: inputs.ubuntu-focal

      - name: Commit updated container image tags
        run: |
          git config user.email "stackhpc-ci@users.noreply.github.com"
          git config user.name "StackHPC CI bot"
          git add -u
          git commit -m "Update container image tags"

      - name: Checkout new branch
        run: |
          git checkout -b ${{ inputs.branch-name }}
        if: inputs.branch-name

      - name: Push updated container image tags
        run: |
          git push

      - name: Create a pull request
        run: |
          gh pr create \
            --base stackhpc/${{ needs.generate-tag.outputs.openstack_release }} \
            --title "$PR_TITLE" \
            --body ""
        env:
          GITHUB_TOKEN: ${{ github.token }}
          PR_TITLE: ${{ inputs.pr-title }}
        if: inputs.create-pr
