---
- name: Deploy RADOS gateway usage exporter
  hosts: monitoring
  gather_facts: false
  tags: radosgw_usage_exporter
  vars:
    venv: "{{ virtualenv_path }}/openstack"
  tasks:
    - name: Set up openstack cli virtualenv
      pip:
        virtualenv: "{{ venv }}"
        virtualenv_command: "/usr/bin/python3 -m venv"
        name:
          - python-openstackclient
        state: latest
        extra_args: "{% if pip_upper_constraints_file %}-c {{ pip_upper_constraints_file }}{% endif %}"
      run_once: true
      delegate_to: "{{ groups['controllers'][0] }}"
      vars:
        ansible_host: "{{ hostvars[groups['controllers'][0]].ansible_host }}"
      when: stackhpc_enable_radosgw_usage_exporter

    - name: Read admin-openrc credential file
      ansible.builtin.command:
        cmd: "cat {{ lookup('ansible.builtin.env', 'KOLLA_CONFIG_PATH') }}/admin-openrc.sh"
      delegate_to: localhost
      register: credential
      when: stackhpc_enable_radosgw_usage_exporter
      changed_when: false

    - name: Set facts for admin credentials
      ansible.builtin.set_fact:
        openstack_auth_env:
          OS_PROJECT_DOMAIN_NAME: "{{ credential.stdout_lines | select('match', '.*OS_PROJECT_DOMAIN_NAME*.') | first | split('=') | last | replace(\"'\",'') }}"
          OS_USER_DOMAIN_NAME: "{{ credential.stdout_lines | select('match', '.*OS_USER_DOMAIN_NAME*.') | first | split('=') | last | replace(\"'\",'') }}"
          OS_PROJECT_NAME: "{{ credential.stdout_lines | select('match', '.*OS_PROJECT_NAME*.') | first | split('=') | last | replace(\"'\",'') }}"
          OS_USERNAME: "{{ credential.stdout_lines | select('match', '.*OS_USERNAME*.') | first | split('=') | last | replace(\"'\",'') }}"
          OS_PASSWORD: "{{ credential.stdout_lines | select('match', '.*OS_PASSWORD*.') | first | split('=') | last | replace(\"'\",'') }}"
          OS_AUTH_URL: "{{ credential.stdout_lines | select('match', '.*OS_AUTH_URL*.') | first | split('=') | last | replace(\"'\",'') }}"
          OS_INTERFACE: "{{ credential.stdout_lines | select('match', '.*OS_INTERFACE*.') | first | split('=') | last | replace(\"'\",'') }}"
          OS_IDENTITY_API_VERSION: "{{ credential.stdout_lines | select('match', '.*OS_IDENTITY_API_VERSION*.') | first | split('=') | last | replace(\"'\",'') }}"
          OS_CACERT: "{{ '/etc/ssl/certs/ca-certificates.crt' if os_distribution == 'ubuntu' else '/etc/pki/tls/certs/ca-bundle.crt' }}"
      when: stackhpc_enable_radosgw_usage_exporter

    - name: Check ec2 credential for admin
      command: >
        {{ venv }}/bin/openstack
        ec2 credentials list --user admin
        --format json
      environment: "{{ openstack_auth_env }}"
      register: credential_check
      delegate_to: "{{ groups['controllers'][0] }}"
      vars:
        ansible_host: "{{ hostvars[groups['controllers'][0]].ansible_host }}"
      run_once: true
      when: stackhpc_enable_radosgw_usage_exporter

    - name: Create ec2 credential if there's none
      command: >
        {{ venv }}/bin/openstack
        ec2 credentials create --user admin
        --format json
      environment: "{{ openstack_auth_env }}"
      delegate_to: "{{ groups['controllers'][0] }}"
      vars:
        ansible_host: "{{ hostvars[groups['controllers'][0]].ansible_host }}"
      run_once: true
      when:
        - stackhpc_enable_radosgw_usage_exporter
        - "{{ credential_check.stdout == [] }}"

    - name: Query ec2 credential for admin
      command: >
        {{ venv }}/bin/openstack
        ec2 credentials list --user admin
        --format json
      environment: "{{ openstack_auth_env }}"
      delegate_to: "{{ groups['controllers'][0] }}"
      vars:
        ansible_host: "{{ hostvars[groups['controllers'][0]].ansible_host }}"
      register: credential
      run_once: true
      when: stackhpc_enable_radosgw_usage_exporter

    - name: Get object storage endpoint
      command: >
        {{ venv }}/bin/openstack
        endpoint list --service object-store --interface internal
        --format json
      environment: "{{ openstack_auth_env }}"
      delegate_to: "{{ groups['controllers'][0] }}"
      vars:
        ansible_host: "{{ hostvars[groups['controllers'][0]].ansible_host }}"
      register: endpoint
      run_once: true
      when: stackhpc_enable_radosgw_usage_exporter

    - name: Ensure radosgw_usage_exporter container is running
      community.docker.docker_container:
        name: radosgw_usage_exporter
        image: ghcr.io/stackhpc/radosgw_usage_exporter:0.1.0
        network_mode: host
        env:
          RADOSGW_SERVER: "{{ radosgw_server }}"
          ADMIN_ENTRY: admin
          ACCESS_KEY: "{{ ec2.Access }}"
          SECRET_KEY: "{{ ec2.Secret }}"
          VIRTUAL_PORT: "{{ stackhpc_radosgw_usage_exporter_port | string }}"
        entrypoint: "{{ [ 'python', '-u', './radosgw_usage_exporter.py', '--insecure' ] if not stackhpc_radosgw_usage_exporter_verify else omit }}"
      vars:
        ec2: "{{ credential.stdout | from_json | first }}"
        host: "{{ endpoint.stdout | from_json | first }}"
        radosgw_server: "{{ host.URL | regex_replace('(https?://)([^:/]+):([0-9]+)/.*', '\\1\\2:\\3') }}" # Drop Swift api address
      become: true
      when: stackhpc_enable_radosgw_usage_exporter

    - name: Create radosgw-usage-exporter directory
      ansible.builtin.file:
        path: /opt/kayobe/radosgw-usage-exporter/
        state: directory
      when:
        - stackhpc_enable_radosgw_usage_exporter
        - stackhpc_radosgw_usage_exporter_cacert | length > 0

    - name: Copy CA certificate to RADOS gateway usage exporter nodes
      ansible.builtin.copy:
        src: "{{ stackhpc_radosgw_usage_exporter_cacert }}"
        dest: "/opt/kayobe/radosgw-usage-exporter/{{ stackhpc_radosgw_usage_exporter_cacert | basename }}"
      register: copy_to_node_result
      when:
        - stackhpc_enable_radosgw_usage_exporter
        - stackhpc_radosgw_usage_exporter_cacert | length > 0

    - name: Copy CA certificate to RADOS gateway usage exporter container
      community.docker.docker_container_copy_into:
        container: radosgw_usage_exporter
        path: "{{ copy_to_node_result.dest }}"
        container_path: "/usr/local/share/ca-certificates/{{ copy_to_node_result.dest | basename }}"
      become: true
      when:
        - stackhpc_enable_radosgw_usage_exporter
        - stackhpc_radosgw_usage_exporter_cacert | length > 0

    - name: Update CA certificate of RADOS gateway usage exporter container
      community.docker.docker_container_exec:
        container: radosgw_usage_exporter
        command: update-ca-certificates
        user: root
      become: true
      when:
        - stackhpc_enable_radosgw_usage_exporter
        - stackhpc_radosgw_usage_exporter_cacert | length > 0
