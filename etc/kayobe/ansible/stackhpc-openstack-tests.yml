---
- name: Run StackHPC OpenStack tests
  hosts: tempest_runner
  tags:
    - stackhpc-openstack-tests
  vars:
    sot_venv: "{{ virtualenv_path }}/sot-venv"
    sot_repo: "https://github.com/stackhpc/stackhpc-openstack-tests"
    sot_version: "v0.0.1"
    sot_timeout: 30
    results_path_local: "{{ lookup('env', 'HOME') }}/sot-results"
  tasks:
    - block:
        - name: Create a temporary directory for tests repo
          ansible.builtin.tempfile:
            state: directory
            suffix: sot-repo
          register: repo_tmpdir

        - name: Create a temporary directory for results
          ansible.builtin.tempfile:
            state: directory
            suffix: sot-results
          register: results_tmpdir

        - name: Clone the StackHPC OpenStack tests repository
          ansible.builtin.git:
            repo: "{{ sot_repo }}"
            version: "{{ sot_version }}"
            dest: "{{ repo_tmpdir.path }}"
            depth: 1
            single_branch: true

        - name: Ensure the latest versions of pip and setuptools are installed  # noqa package-latest
          ansible.builtin.pip:
            name: "{{ item.name }}"
            state: latest
            virtualenv: "{{ sot_venv }}"
            virtualenv_command: "python3 -m venv"
          with_items:
            - { name: pip }
            - { name: setuptools }

        - name: Ensure required Python packages are installed
          ansible.builtin.pip:
            name:
              - "{{ repo_tmpdir.path }}"
              - "-r{{ repo_tmpdir.path }}/requirements.txt"
              - pytest-html
              - pytest-timeout
            virtualenv: "{{ sot_venv }}"

        - name: Include Kolla Ansible passwords
          ansible.builtin.include_vars:
            file: "{{ kayobe_env_config_path }}/kolla/passwords.yml"
            name: kolla_passwords

        - name: Run StackHPC OpenStack tests
          ansible.builtin.command:
            cmd: >
              {{ sot_venv }}/bin/py.test
              --html={{ results_tmpdir.path }}/stackhpc-openstack-tests.html
              --self-contained-html
              --pyargs stackhpc_openstack_tests
              --timeout {{ sot_timeout }}
              -vv
          environment:
            GRAFANA_URL: "{{ sot_grafana_url }}"
            GRAFANA_USERNAME: "{{ sot_grafana_username }}"
            GRAFANA_PASSWORD: "{{ sot_grafana_password }}"
            OPENSEARCH_HOSTS: "{{ sot_opensearch_hosts }}"
            OPENSEARCH_PORT: "{{ sot_opensearch_port }}"
            OPENSEARCH_TLS: "{{ sot_opensearch_tls }}"
            OPENSEARCH_DASHBOARDS_URL: "{{ sot_opensearch_dashboards_url }}"
            OPENSEARCH_DASHBOARDS_USERNAME: "{{ sot_opensearch_dashboards_username }}"
            OPENSEARCH_DASHBOARDS_PASSWORD: "{{ sot_opensearch_dashboards_password }}"
            PROMETHEUS_URL: "{{ sot_prometheus_url }}"
            PROMETHEUS_USERNAME: "{{ sot_prometheus_username }}"
            PROMETHEUS_PASSWORD: "{{ sot_prometheus_password }}"
          vars:
            kolla_external_scheme: "{{ 'https' if kolla_enable_tls_external | bool else 'http' }}"
            kolla_internal_scheme: "{{ 'https' if kolla_enable_tls_internal | bool else 'http' }}"
            sot_grafana_url: "{{ kolla_external_scheme }}://{{ kolla_external_fqdn }}:3000"
            sot_grafana_username: "grafana_local_admin"
            sot_grafana_password: "{{ kolla_passwords.grafana_admin_password }}"
            sot_opensearch_hosts: "{{ kolla_internal_fqdn }}"
            sot_opensearch_port: 9200
            sot_opensearch_tls: false
            sot_opensearch_dashboards_url: "{{ kolla_external_scheme }}://{{ kolla_external_fqdn }}:5601"
            sot_opensearch_dashboards_username: "opensearch"
            sot_opensearch_dashboards_password: "{{ kolla_passwords.opensearch_dashboards_password }}"
            sot_prometheus_url: "{{ kolla_internal_scheme }}://{{ kolla_internal_fqdn }}:9091"
            sot_prometheus_username: "admin"
            sot_prometheus_password: "{{ kolla_passwords.prometheus_password }}"
      always:
        - name: Fetch results
          ansible.builtin.fetch:
            src: "{{ results_tmpdir.path }}/stackhpc-openstack-tests.html"
            dest: "{{ results_path_local }}/"
            flat: true

        - name: Clean up temporary directory
          ansible.builtin.file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ repo_tmpdir.path }}"
            - "{{ results_tmpdir.path }}"
