---
# To prevent Ansible role dependency errors, this playbook requires that environment variable
# ANSIBLE_ROLES_PATH is defined and includes '$KAYOBE_PATH/ansible/roles' on the Ansible control host.
- name: Migrate hosts from Ubuntu Focal 20.04 to Jammy 22.04
  hosts: overcloud:infra-vms:seed:seed-hypervisor
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Assert that hosts are running Ubuntu Focal
      assert:
        that:
          - ansible_facts.distribution == 'Ubuntu'
          - ansible_facts.distribution_major_version == '20'
          - ansible_facts.distribution_release == 'focal'
          - os_distribution == 'ubuntu'
        fail_msg: >-
          This playbook is only designed for Ubuntu Focal 20.04 hosts. Ensure
          that you are limiting it to only run on Focal hosts and
          os_distribution is set to ubuntu.

    - name: Ensure apt packages are up to date
      apt:
        update_cache: true
        upgrade: yes
      become: true

    - name: Ensure do-release-upgrade is installed
      package:
        name: ubuntu-release-upgrader-core
        state: latest
      become: true

    - name: Check whether a reboot is required
      stat:
        path: /var/run/reboot-required
      register: file_status

    - name: Reboot to apply updates
      reboot:
        reboot_timeout: 1200
        connect_timeout: 600
      become: true
      when: file_status.stat.exists

    # NOTE: We cannot use apt_repository here because definitions must exist within the standard repos.list
    - name: Ensure Jammy repo definitions exist in sources.list
      blockinfile:
        path: /etc/apt/sources.list
        block: |
          deb {{ stackhpc_repo_ubuntu_jammy_url }} jammy main restricted universe multiverse
          deb {{ stackhpc_repo_ubuntu_jammy_url }} jammy-updates main restricted universe multiverse
          deb {{ stackhpc_repo_ubuntu_jammy_url }} jammy-backports main restricted universe multiverse
          deb {{ stackhpc_repo_ubuntu_jammy_security_url }} jammy-security main restricted universe multiverse
      become: true

    - name: Do release upgrade
      command: do-release-upgrade -f DistUpgradeViewNonInteractive
      become: true

    - name: Ensure old venvs do not exist
      file:
        path: "/opt/kayobe/venvs/{{ item }}"
        state: absent
      loop:
        - kayobe
        - kolla-ansible
      become: true

    - name: Update Python and current user facts before re-creating Kayobe venv
      ansible.builtin.setup:
        filter: "{{ kayobe_ansible_setup_filter }}"
        gather_subset: "{{ kayobe_ansible_setup_gather_subset }}"

- name: Run the Kayobe kayobe-target-venv playbook to ensure kayobe venv exists on remote host
  import_playbook: "{{ lookup('ansible.builtin.env', 'VIRTUAL_ENV') }}/share/kayobe/ansible/kayobe-target-venv.yml"

- name: Run the Kayobe network configuration playbook, to ensure definitions are not lost on reboot
  import_playbook: "{{ lookup('ansible.builtin.env', 'VIRTUAL_ENV') }}/share/kayobe/ansible/network.yml"

- name: Reboot and confirm the host is upgraded to Jammy 22.04
  hosts: overcloud:infra-vms:seed:seed-hypervisor
  vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: Ensure Jammy repo definitions do not exist in sources.list
      blockinfile:
        path: /etc/apt/sources.list
        state: absent
      become: true

    - name: Reboot and wait
      reboot:
        reboot_timeout: 1200
        connect_timeout: 600
      become: true

    - name: Update distribution facts
      ansible.builtin.setup:
        filter: "{{ kayobe_ansible_setup_filter }}"
        gather_subset: "{{ kayobe_ansible_setup_gather_subset }}"

    - name: Assert that hosts are now using Ubuntu 22
      assert:
        that:
          - ansible_facts.distribution_major_version == '22'
          - ansible_facts.distribution_release == 'jammy'

- name: Run the OVN chassis priority fix playbook
  import_playbook: "{{ lookup('ansible.builtin.env', 'KAYOBE_CONFIG_PATH') }}/ansible/ovn-fix-chassis-priorities.yml"
  when: kolla_enable_ovn
