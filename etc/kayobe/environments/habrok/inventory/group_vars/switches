---
###############################################################################
# Switch credentials.

# Host/IP used to access the switch via SSH.
ansible_host: "{{ 'switch_mgmt' | net_ip }}"

# User to access the switch via SSH.
ansible_user: "{{ secrets_switch_ssh_username }}"

# Password to access the switch via SSH.
ansible_ssh_pass: "{{ secrets_switch_ssh_password }}"

# This is referenced but not used.
switch_auth_pass: omit

###############################################################################

# Allow the net_vlan filter to work.
provision_oc_vlan: "{{ provision_oc_untagged_vlan }}"

# Range of provider VLANs for physnet1.
provider_vlans_physnet1:
  start: 1301
  end: 1310

###############################################################################
# Helper variables.

# Example hostname: hb-sw-leaf01-h01
switch_hostname_regex: "hb-sw-(?P<layer>(leaf|mgmt|spine))(?P<rack_index>[0-9]+)-h(?P<rack>[0-9]+)"
switch_layer: "{{ inventory_hostname | regex_search(switch_hostname_regex, '\\g<layer>') | first }}"
switch_rack: "{{ inventory_hostname | regex_search(switch_hostname_regex, '\\g<rack>') | first | int }}"
switch_rack_index: "{{ inventory_hostname | regex_search(switch_hostname_regex, '\\g<rack_index>') | first | int }}"
switch_is_rack_primary: "{{ switch_rack_index | int == 1 }}"
switch_peer: "{{ 'hb-sw-{layer}{peer_index:02}-h{rack:02}'.format(layer=switch_layer, peer_index=2 if switch_rack_index | int == 1 else 1, rack=switch_rack | int) }}"

# Priority determines switch lag member gets enabled in fallback mode
switch_priority: "{{ '100' if switch_is_rack_primary else '200' }}"

###############################################################################
# Global configuration.

switch_type: dellos10

switch_config: "{{ switch_config_nested | flatten }}"

# Nested lists of configuration. To be defined for each group.
switch_config_nested: []

# Switch hostname
switch_config_hostname:
  - hostname {{ inventory_hostname }}

# Default route on management port
switch_config_mgmt:
  - management route 0.0.0.0/0 {{ switch_mgmt_switch_gateway }}

# Enable Rapid PVST
switch_config_spanning_tree:
  - spanning-tree mode rapid-pvst

# Enable Bidirectional Forwarding Detection
switch_config_bfd:
  - bfd enable

###############################################################################
# Interface configuration.

switch_interface_config: >-
  {{ switch_interface_config_vlans |
     combine(switch_interface_config_mgmt) |
     combine(switch_interface_config_ethernet) |
     combine(switch_interface_config_fabric) |
     combine(switch_interface_config_autogenerated) }}

# Define thse VLANs on all switches
switch_interface_config_vlans: "{{ switch_interface_config_vlans_template | from_yaml }}"

# Define these VLANs on all switches
# NOTE: This is a string so we can use jinja templating for the dictionary keys
switch_interface_config_vlans_template: |
  []

# Management port config
switch_interface_config_mgmt:
  mgmt 1/1/1:
    description: Management
    config:
      - no ip address dhcp
      - ip address {{ 'switch_mgmt' | net_ip }}/{{ 'switch_mgmt' | net_prefix }}
      - no shutdown

switch_interface_config_ethernet: []

switch_interface_config_fabric: []

switch_interface_config_autogenerated: []

# Disabled interface
switch_interface_config_disabled:
  - shutdown

# VLANs to trunk on the uplink from management switches to spines
switch_mgmt_uplink_trunk_vlans:
  - "{{ public_net_name | net_vlan }}"
  - "{{ provision_wl_net_name | net_vlan }}"
  - "{{ provision_oc_untagged_vlan }}"
  - "{{ oob_oc_net_name | net_vlan }}"
  - "{{ oob_wl_net_name | net_vlan }}"
  - "{{ mgmt_lustre_vlan }}"
  - "{{ lustre_storage_vlan }}"
  - "{{ switch_mgmt_vlan }}"
