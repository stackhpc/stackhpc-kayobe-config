---
#########################################
# StackHPC default firewall configuration
#########################################
# This file contains the reference StackHPC firewalld rule implementation. It
# is designed to cover as many services and use cases as possible, however may
# not be compatible with all deployments. For more information, see the
# firewall page in the configuration section of the SKC docs.

# A templated list of firewalld zones, according to the host's network
# interfaces.
# This variable can be used to set any *_firewalld_zones kayobe variable e.g.
# compute_firewalld_zones: "{{ stackhpc_firewalld_zones }}" in compute.yml
stackhpc_firewalld_zones: |
  {% set network_zones = [] %}
  {% for network in network_interfaces %}
  {% if network | net_zone %}
  {% set _ = network_zones.append({'zone': network | net_zone }) %}
  {% endif %}
  {% endfor %}
  {{ network_zones | unique }}

# A templated list of firewalld rules, according to the enabled services,
# host's group membership, and host's network configuration.
# This variable can be used to set any *_firewalld_rules kayobe variable e.g.
# compute_firewalld_rules: "{{ stackhpc_firewalld_rules }}" in compute.yml
stackhpc_firewalld_rules: |
  {% set stackhpc_firewalld_rules_verified = [] %}
  {% for rule in stackhpc_firewalld_rules_unverified | unique %}
  {% if rule | ansible.utils.remove_keys('state') in stackhpc_firewalld_rules_verified | map('ansible.utils.remove_keys', 'state') %}
  {% set stackhpc_firewalld_rules_verified = 'Invalid configuration! Two matching firewalld rules probably exist with different states' + 1 %}
  {% elif rule.network in network_interfaces and rule.network | net_zone %}
  {% set _ = stackhpc_firewalld_rules_verified.append(rule) %}
  {% endif %}
  {% endfor %}
  {{ stackhpc_firewalld_rules_verified }}

# Rules in this list may still contradict each other or reference non-existent
# zones and interfaces
stackhpc_firewalld_rules_unverified: |
  {{ stackhpc_common_firewalld_rules +
     (stackhpc_controller_firewalld_rules if 'controllers' in group_names else []) +
     (stackhpc_compute_firewalld_rules if 'compute' in group_names else []) +
     (stackhpc_storage_firewalld_rules if 'storage' in group_names else []) +
     (stackhpc_monitoring_firewalld_rules if 'monitoring' in group_names else []) +
     (stackhpc_seed_firewalld_rules if 'seed' in group_names else []) +
     (stackhpc_seed_hypervisor_firewalld_rules if 'seed-hypervisor' in group_names else []) +
     (stackhpc_wazuh_manager_infra_vm_firewalld_rules if 'wazuh-manager' in group_names else []) +
     (stackhpc_ansible_control_infra_vm_firewalld_rules if inventory_hostname == 'localhost' else []) }}

###############################################################################
# Common firewalld rules

stackhpc_common_firewalld_rules: "{{ stackhpc_common_firewalld_rules_default + stackhpc_common_firewalld_rules_extra }}"

stackhpc_common_firewalld_rules_default: |
  {% set stackhpc_common_firewalld_rules_formatted = [] %}
  {% for ruleset in stackhpc_common_firewalld_rules_template %}
  {% if ruleset.enabled | bool %}
  {% for rule in ruleset.rules %}
  {% set _ = stackhpc_common_firewalld_rules_formatted.append(rule | combine({'zone': rule.network | net_zone })) %}
  {% endfor %}
  {% endif %}
  {% endfor %}
  {{ stackhpc_common_firewalld_rules_formatted }}

stackhpc_common_firewalld_rules_template:
  # Common
  - rules:
      - service: ssh
        network: "{{ admin_oc_net_name }}"
        state: enabled
    enabled: true
  - rules:
      - service: cockpit
        network: "{{ public_net_name }}"
        state: disabled
      - service: dhcpv6-client
        network: "{{ public_net_name }}"
        state: disabled
    enabled: "{{ {'zone': public_net_name | net_zone} in firewalld_zones }}"
  - rules:
      - service: ssh
        network: "{{ public_net_name }}"
        state: disabled
    enabled: "{{ {'zone': 'public' | net_zone} in firewalld_zones and admin_oc_net_name | net_zone != public_net_name | net_zone }}"

stackhpc_common_firewalld_rules_extra: []

###############################################################################
# Controller firewalld rules

stackhpc_controller_firewalld_rules: "{{ stackhpc_controller_firewalld_rules_default + stackhpc_controller_firewalld_rules_extra }}"

stackhpc_controller_firewalld_rules_default: |
  {% set stackhpc_controller_firewalld_rules_formatted = [] %}
  {% for ruleset in stackhpc_controller_firewalld_rules_template %}
  {% if ruleset.enabled | bool %}
  {% for rule in ruleset.rules %}
  {% set _ = stackhpc_controller_firewalld_rules_formatted.append(rule | combine({'zone': rule.network | net_zone })) %}
  {% endfor %}
  {% endif %}
  {% endfor %}
  {{ stackhpc_controller_firewalld_rules_formatted }}

stackhpc_controller_firewalld_rules_template:
  # Overcloud Ironic
  - rules:
      # Ironic inspector API
      - port: 5050/tcp
        network: "{{ provision_oc_net_name }}"
        state: enabled
      # Ironic API
      - port: 6385/tcp
        network: "{{ provision_oc_net_name }}"
        state: enabled
      - port: 8089/tcp
        network: "{{ provision_wl_net_name }}"
        state: enabled
      - service: dhcp
        network: "{{ provision_wl_net_name }}"
        state: enabled
      - service: ntp
        network: "{{ provision_wl_net_name }}"
        state: enabled
      - service: tftp
        network: "{{ provision_wl_net_name }}"
        state: enabled
    enabled: "{{ kolla_enable_ironic | bool }}"
  # Designate
  - rules:
      - port: 53/tcp
        network: "{{ public_net_name }}"
        state: enabled
      - port: 53/udp
        network: "{{ public_net_name }}"
        state: enabled
      - port: 5354/tcp
        network: "{{ public_net_name }}"
        state: enabled
      - port: 5354/udp
        network: "{{ public_net_name }}"
        state: enabled
    enabled: "{{ kolla_enable_designate | bool }}"
  # GENEVE
  - rules:
      - port: 6081/udp
        network: "{{ tunnel_net_name }}"
        state: enabled
    enabled: "{{ 'geneve' in (kolla_neutron_ml2_type_drivers + kolla_neutron_ml2_tenant_network_types) and 'network' in group_names }}"
  # VXLAN
  - rules:
      - port: 4789/udp
        network: "{{ tunnel_net_name }}"
        state: enabled
    enabled: "{{ 'vxlan' in (kolla_neutron_ml2_type_drivers + kolla_neutron_ml2_tenant_network_types) and 'network' in group_names }}"
  # Octavia
  - rules:
      - port: 5555/udp
        network: "{{ octavia_net_name | default(public_net_name) }}"
        state: enabled
    enabled: "{{ kolla_enable_octavia | bool }}"

stackhpc_controller_firewalld_rules_extra: []

###############################################################################
# Compute firewalld rules

stackhpc_compute_firewalld_rules: "{{ stackhpc_compute_firewalld_rules_default + stackhpc_compute_firewalld_rules_extra }}"

stackhpc_compute_firewalld_rules_default: |
  {% set stackhpc_compute_firewalld_rules_formatted = [] %}
  {% for ruleset in stackhpc_compute_firewalld_rules_template %}
  {% if ruleset.enabled | bool %}
  {% for rule in ruleset.rules %}
  {% if rule.network in network_interfaces and rule.network | net_zone %}
  {% set _ = stackhpc_compute_firewalld_rules_formatted.append(rule | combine({'zone': rule.network | net_zone })) %}
  {% endif %}
  {% endfor %}
  {% endif %}
  {% endfor %}
  {{ stackhpc_compute_firewalld_rules_formatted }}

stackhpc_compute_firewalld_rules_template:
  # GENEVE
  - rules:
      - port: 6081/udp
        network: "{{ tunnel_net_name }}"
        state: enabled
    enabled: "{{ ('geneve' in (kolla_neutron_ml2_type_drivers + kolla_neutron_ml2_tenant_network_types)) | bool }}"
  # VXLAN
  - rules:
      - port: 4789/udp
        network: "{{ tunnel_net_name }}"
        state: enabled
    enabled: "{{ ('vxlan' in (kolla_neutron_ml2_type_drivers + kolla_neutron_ml2_tenant_network_types)) | bool }}"

stackhpc_compute_firewalld_rules_extra: []

###############################################################################
# Storage firewalld rules

stackhpc_storage_firewalld_rules: "{{ stackhpc_storage_firewalld_rules_default + stackhpc_storage_firewalld_rules_extra }}"

stackhpc_storage_firewalld_rules_default: |
  {% set stackhpc_storage_firewalld_rules_formatted = [] %}
  {% for ruleset in stackhpc_storage_firewalld_rules_template %}
  {% if ruleset.enabled | bool %}
  {% for rule in ruleset.rules %}
  {% if rule.network in network_interfaces and rule.network | net_zone %}
  {% set _ = stackhpc_storage_firewalld_rules_formatted.append(rule | combine({'zone': rule.network | net_zone })) %}
  {% endif %}
  {% endfor %}
  {% endif %}
  {% endfor %}
  {{ stackhpc_storage_firewalld_rules_formatted }}

stackhpc_storage_firewalld_rules_template:
  # Ceph Prometheus exporter
  - rules:
      - port: 9283/tcp
        network: "{{ provision_oc_net_name }}"
        state: enabled
    enabled: "{{ kolla_enable_prometheus_ceph_mgr_exporter | bool | default(false) and 'mgrs' in group_names }}"
  # Ceph
  - rules:
      - service: ceph
        network: "{{ storage_net_name }}"
        state: enabled
      - service: ceph
        network: "{{ storage_mgmt_net_name }}"
        state: enabled
      - service: ceph-mon
        network: "{{ storage_net_name }}"
        state: "{{ 'enabled' if 'mons' in group_names else 'disabled' }}"
    enabled: "{{ 'ceph' in group_names }}"

stackhpc_storage_firewalld_rules_extra: []

###############################################################################
# Monitoring firewalld rules

stackhpc_monitoring_firewalld_rules: "{{ stackhpc_monitoring_firewalld_rules_default + stackhpc_monitoring_firewalld_rules_extra }}"

stackhpc_monitoring_firewalld_rules_default: |
  {% set stackhpc_monitoring_firewalld_rules_formatted = [] %}
  {% for ruleset in stackhpc_monitoring_firewalld_rules_template %}
  {% if ruleset.enabled | bool %}
  {% for rule in ruleset.rules %}
  {% if rule.network in network_interfaces and rule.network | net_zone %}
  {% set _ = stackhpc_monitoring_firewalld_rules_formatted.append(rule | combine({'zone': rule.network | net_zone })) %}
  {% endif %}
  {% endfor %}
  {% endif %}
  {% endfor %}
  {{ stackhpc_monitoring_firewalld_rules_formatted }}

stackhpc_monitoring_firewalld_rules_template: []

stackhpc_monitoring_firewalld_rules_extra: []

###############################################################################
# Infra VM firewalld rules (Wazuh Manager)

stackhpc_wazuh_manager_infra_vm_firewalld_rules: "{{ stackhpc_wazuh_manager_infra_vm_firewalld_rules_default + stackhpc_wazuh_manager_infra_vm_firewalld_rules_extra }}"

stackhpc_wazuh_manager_infra_vm_firewalld_rules_default: |
  {% set stackhpc_wazuh_manager_infra_vm_firewalld_rules_formatted = [] %}
  {% for ruleset in stackhpc_wazuh_manager_infra_vm_firewalld_rules_template %}
  {% if ruleset.enabled | bool %}
  {% for rule in ruleset.rules %}
  {% if rule.network in network_interfaces and rule.network | net_zone %}
  {% set _ = stackhpc_wazuh_manager_infra_vm_firewalld_rules_formatted.append(rule | combine({'zone': rule.network | net_zone })) %}
  {% endif %}
  {% endfor %}
  {% endif %}
  {% endfor %}
  {{ stackhpc_wazuh_manager_infra_vm_firewalld_rules_formatted }}

stackhpc_wazuh_manager_infra_vm_firewalld_rules_template:
  - rules:
      - port: 1514/tcp
        network: "{{ provision_oc_net_name }}"
        state: enabled
      - port: 1514/udp
        network: "{{ provision_oc_net_name }}"
        state: enabled
      - port: 1515/tcp
        network: "{{ provision_oc_net_name }}"
        state: enabled
      - port: 443/tcp
        network: "{{ public_net_name }}"
        state: enabled
      - port: 9200/tcp
        network: "{{ provision_oc_net_name }}"
        state: enabled
      - port: 9300-9400/tcp
        network: "{{ provision_oc_net_name }}"
        state: enabled
      - port: 55000/tcp
        network: "{{ provision_oc_net_name }}"
        state: enabled
    enabled: true

stackhpc_wazuh_manager_infra_vm_firewalld_rules_extra: []

###############################################################################
# Infra VM firewalld rules (Ansible Control)

stackhpc_ansible_control_infra_vm_firewalld_rules: "{{ stackhpc_ansible_control_infra_vm_firewalld_rules_default + stackhpc_ansible_control_infra_vm_firewalld_rules_extra }}"

stackhpc_ansible_control_infra_vm_firewalld_rules_default: |
  {% set stackhpc_ansible_control_infra_vm_firewalld_rules_formatted = [] %}
  {% for ruleset in stackhpc_ansible_control_infra_vm_firewalld_rules_template %}
  {% if ruleset.enabled | bool %}
  {% for rule in ruleset.rules %}
  {% if rule.network in network_interfaces and rule.network | net_zone %}
  {% set _ = stackhpc_ansible_control_infra_vm_firewalld_rules_formatted.append(rule | combine({'zone': rule.network | net_zone })) %}
  {% endif %}
  {% endfor %}
  {% endif %}
  {% endfor %}
  {{ stackhpc_ansible_control_infra_vm_firewalld_rules_formatted }}

stackhpc_ansible_control_infra_vm_firewalld_rules_template: []

stackhpc_ansible_control_infra_vm_firewalld_rules_extra: []

###############################################################################
# Seed firewalld rules

stackhpc_seed_firewalld_rules: "{{ stackhpc_seed_firewalld_rules_default + stackhpc_seed_firewalld_rules_extra }}"

stackhpc_seed_firewalld_rules_default: |
  {% set stackhpc_seed_firewalld_rules_formatted = [] %}
  {% for ruleset in stackhpc_seed_firewalld_rules_template %}
  {% if ruleset.enabled | bool %}
  {% for rule in ruleset.rules %}
  {% if rule.network in network_interfaces and rule.network | net_zone %}
  {% set _ = stackhpc_seed_firewalld_rules_formatted.append(rule | combine({'zone': rule.network | net_zone })) %}
  {% endif %}
  {% endfor %}
  {% endif %}
  {% endfor %}
  {{ stackhpc_seed_firewalld_rules_formatted }}

stackhpc_seed_firewalld_rules_template:
  # Pulp server
  - rules:
      - port: "{{ pulp_port }}/tcp"
        network: "{{ provision_oc_net_name }}"
        state: enabled
    enabled: "{{ seed_pulp_container_enabled | bool }}"
  # Squid proxy
  - rules:
      - service: squid
        network: "{{ provision_oc_net_name }}"
        state: enabled
    enabled: "{{ seed_squid_container_enabled | bool }}"
  # Ironic
  - rules:
      # nginx
      - port: 8080/tcp
        network: "{{ provision_oc_net_name }}"
        state: enabled
      # Ironic inspector API
      - port: 5050/tcp
        network: "{{ provision_oc_net_name }}"
        state: enabled
      # Ironic API
      - port: 6385/tcp
        network: "{{ provision_oc_net_name }}"
        state: enabled
      - service: dhcp
        network: "{{ provision_oc_net_name }}"
        state: enabled
      - service: tftp
        network: "{{ provision_oc_net_name }}"
        state: enabled
      - service: ntp
        network: "{{ provision_oc_net_name }}"
        state: enabled
    enabled: true  #FIXME: Make rules conditional on Bifrost deployment
  # Redfish exporter
  - rules:
      - port: 9610/tcp
        network: "{{ provision_oc_net_name }}"
        state: enabled
    enabled: "{{ stackhpc_enable_redfish_exporter | default(false) }}"
  # TODO: Rules if SNAT enabled on seed

stackhpc_seed_firewalld_rules_extra: []

###############################################################################
# Seed Hypervisor firewalld rules

stackhpc_seed_hypervisor_firewalld_rules: "{{ stackhpc_seed_hypervisor_firewalld_rules_default + stackhpc_seed_hypervisor_firewalld_rules_extra }}"

stackhpc_seed_hypervisor_firewalld_rules_default: |
  {% set stackhpc_seed_hypervisor_firewalld_rules_formatted = [] %}
  {% for ruleset in stackhpc_seed_hypervisor_firewalld_rules_template %}
  {% if ruleset.enabled | bool %}
  {% for rule in ruleset.rules %}
  {% if rule.network in network_interfaces and rule.network | net_zone %}
  {% set _ = stackhpc_seed_hypervisor_firewalld_rules_formatted.append(rule | combine({'zone': rule.network | net_zone })) %}
  {% endif %}
  {% endfor %}
  {% endif %}
  {% endfor %}
  {{ stackhpc_seed_hypervisor_firewalld_rules_formatted }}

stackhpc_seed_hypervisor_firewalld_rules_template: []

stackhpc_seed_hypervisor_firewalld_rules_extra: []
